parameters:
    # Common hyperparameters
    mode: 'train'
    load: false
    name: '64seqlen'
    algorithm: PPO
    port: 9000
    gui: false
    env_type: 'SUMO' # 'atari', 'SUMO', or 'gridworld'
    scene: 'loop_network_dumb' # sumo has 'one_grid' and 'loop_network_dumb'
    max_steps: 1.0e+6
    max_episode_steps: 5.0e+3
    frame_height: 24
    frame_width: 24
    num_frames: 1
    skip_frames: 1
    num_epoch: 4
    gamma: 0.99
    lambda: 0.95
    learning_rate: 2.5e-4
    batch_size: 256 # THIS NEEDS TO BE SMALLER THAN n_sequences = memory_size // seq_len
    memory_size: 4096
    train_frequency: 1
    save_frequency: 5.0e+4
    summary_frequency: 3072
    tensorboard: true
    iteration: -1
    episode: 0

    # SUMO settings
    waiting_penalty: false
    new_reward: false
    local_rewards: false
    box_bottom_corner: [26, 26]
    box_top_corner: [50, 50]
    y_t: 4 # Yellow (traffic light) time
    resolutionInPixelsPerMeterX: 1.0
    resolutionInPixelsPerMeterY: 1.0
    car_tm: 10
    state_type: 'ldm_state' # The type of state to use as input for the network. ('bin' (Position Matrix), 'bin_light' (Position Light Matrix), 'value' (Value Matrix))
    scaling_factor: 100
    fast: false
    speed_dev: 0.0 # Can be used to vary the speeds of cars, according to a normal distribution with mean 1 and standard deviation speed_dev (SUMOs default is 0.1)

    # scenario 1, cars either loop once or don't make a loop
    # car_pr 0.125
    # route_segments ['L61 L62 L63 L64 L65 L66 L67 L68', 'L65 L66 L67 L68 L61 L62 L63 L64']
    # route_starts ['L63 L64', 'L67 L68']
    # route_ends ['L61 L62', 'L65 L66']
    # route_max_segments 1
    # scenario 2, cars drive a lot more randomly, but some will still do loops
    car_pr: 1.0
    route_segments: ['L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62',
'L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66 L67 L68 L61 L62 L63 L64 L65 L66']
    route_starts: []
    route_ends: []
    route_max_segments: 1
    route_min_segments: 1

    # MAIN MODEL
    # Fully connected module
    fully_connected: false
    num_fc_layers: 1
    num_fc_units: [128]
    # Convolutional module
    convolutional: true
    num_conv_layers: 2
    num_filters: [16, 32]
    kernel_sizes: [8, 4]
    strides: [4, 2]
    # Recurrent module
    recurrent: true
    num_rec_units: 64
    seq_len: 32

    # INFLUENCE MODEL
    influence: false
    # This boxes now refer to the output of the last conv layer (Check how to manually compute this)
    inf_box_height: 4
    inf_box_width: 6
    # Center refers to the top left corner of the inf_box
    # The top left of the image is 0,0
    # The first number refers to the y-axis, e.g. if we have [5,3], the y-axis value is 5
    # Left box [13, 0], top box [0, 12], right box [13, 24], bottom box [26, 12]
    inf_box_center: [[13, 0],[0,12],[13,24],[26,12]]
    inf_num_predictors: 4
    # Influence fully connected module
    inf_num_fc_layers: 1
    inf_num_fc_units: [128]
    # Influence recurrent module
    inf_num_rec_units: 64
    inf_seq_len: 8

    # PPO only
    beta: 1.0e-2
    epsilon: 0.1
    time_horizon: 128
    c1: 0.5
